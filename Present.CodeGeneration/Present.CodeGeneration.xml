<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Present.CodeGeneration</name>
    </assembly>
    <members>
        <member name="T:Present.CodeGeneration.CodeFileWriter">
            <summary>
            Responsible for writing generated code to a file.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.CodeFileWriter.#ctor(Ninject.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Present.CodeGeneration.CodeFileWriter"/> class.
            </summary>
            <param name="logger">Tbe logger.</param>
        </member>
        <member name="M:Present.CodeGeneration.CodeFileWriter.WriteCodeFileToPath(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,System.String)">
            <summary>
            Writes the namespace declaration to a code file in the output path.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="namespaceDeclaration">The namespace declaration.</param>
            <param name="outputPath">The output path for the file.</param>
        </member>
        <member name="T:Present.CodeGeneration.Constants.FileExtension">
            <summary>
            File extension constants.
            </summary>
        </member>
        <member name="F:Present.CodeGeneration.Constants.FileExtension.CSharp">
            <summary>
            The C# file extension.
            </summary>
        </member>
        <member name="T:Present.CodeGeneration.Constants.Interface">
            <summary>
            Interface constants.
            </summary>
        </member>
        <member name="F:Present.CodeGeneration.Constants.Interface.DefaultPrefix">
            <summary>
            The interface default prefix.
            </summary>
        </member>
        <member name="T:Present.CodeGeneration.Constants.LanguageKeyword">
            <summary>
            Language keyword constants.
            </summary>
        </member>
        <member name="F:Present.CodeGeneration.Constants.LanguageKeyword.Void">
            <summary>
            The void keyword.
            </summary>
        </member>
        <member name="T:Present.CodeGeneration.Constants.Namespace">
            <summary>
            Namespace constants.
            </summary>
        </member>
        <member name="F:Present.CodeGeneration.Constants.Namespace.System">
            <summary>
            The System namespace.
            </summary>
        </member>
        <member name="F:Present.CodeGeneration.Constants.Namespace.Present">
            <summary>
            The Present namespace.
            </summary>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.IClassCodeGenerator">
            <summary>
            Contract for the class code generator.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.IClassCodeGenerator.Generate(System.String,System.String)">
            <summary>
            Generates a Roslyn class definition.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="interfaceName">The name of the interface the type implements.</param>
            <returns>The generated interface declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.ICodeFileWriter">
            <summary>
            Contract for the code file writer.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.ICodeFileWriter.WriteCodeFileToPath(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax,System.String)">
            <summary>
            Writes the namespace declaration to a code file in the output path.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="namespaceDeclaration">The namespace declaration.</param>
            <param name="outputPath">The output path for the file.</param>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.IInterfaceCodeGenerator">
            <summary>
            Contract for the interface code generator.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.IInterfaceCodeGenerator.Generate(System.String)">
            <summary>
            Generates a Roslyn interface definition.
            </summary>
            <param name="interfaceName">The interface name.</param>
            <returns>The generated interface declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.IMethodAnalyser">
            <summary>
            Contract for the method analyser.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.IMethodAnalyser.IsWrappingSupported(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method can be wrapped automatically
            by the Present code generator.
            </summary>
            <param name="method">The method to analyse.</param>
            <returns>Returns true when the method can be wrapped automatially, otherwise false.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.IMethodCodeGenerator">
            <summary>
            Contract for the method code generator.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.IMethodCodeGenerator.Generate(System.Reflection.MethodInfo)">
            <summary>
            Generates a Roslyn method definition from a <see cref="T:System.Reflection.MethodInfo"/> object.
            </summary>
            <param name="method">The method.</param>
            <returns>The generated method declaration and method body.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.INamespaceCodeGenerator">
            <summary>
            Contract for the namespace generator.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.INamespaceCodeGenerator.Generate(System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Generates a Roslyn namespace definition from a type and its methods.
            </summary>
            <param name="typeNamespace">The namespace which the type belongs to.</param>
            <param name="typeName">The name of the type.</param>
            <param name="methods">The methods to be wrapped.</param>
            <returns>The generated namespace declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Contracts.ITypeWrapper">
            <summary>
            Contract for the type wrapper.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Contracts.ITypeWrapper.Wrap(System.String,System.String)">
            <summary>
            Creates a wrapper class for a .NET type and outputs
            the code file.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified name of the .NET type to be wrapped.</param>
            <param name="outputPath">The output path of the generated code file.</param>
        </member>
        <member name="T:Present.CodeGeneration.Generators.ClassCodeGenerator">
            <summary>
            Responsible for generating the Roslyn definition for a class.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Generators.ClassCodeGenerator.Generate(System.String,System.String)">
            <summary>
            Generates a Roslyn class definition.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="interfaceName">The name of the interface the type implements.</param>
            <returns>The generated interface declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Generators.InterfaceCodeGenerator">
            <summary>
            Responsible for generating the Roslyn definition for an interface.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Generators.InterfaceCodeGenerator.Generate(System.String)">
            <summary>
            Generates a Roslyn interface definition.
            </summary>
            <param name="interfaceName">The interface name.</param>
            <returns>The generated interface declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Generators.MethodCodeGenerator">
            <summary>
            Responsible for generating the Roslyn definition for a method.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Generators.MethodCodeGenerator.Generate(System.Reflection.MethodInfo)">
            <summary>
            Generates a Roslyn method definition from a <see cref="T:System.Reflection.MethodInfo"/> object.
            </summary>
            <param name="method">The method.</param>
            <returns>The generated method declaration and method body.</returns>
        </member>
        <member name="T:Present.CodeGeneration.Generators.NamespaceCodeGenerator">
            <summary>
            Responsible for generating the Roslyn definition for a namespace.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.Generators.NamespaceCodeGenerator.#ctor(Ninject.Extensions.Logging.ILogger,Present.CodeGeneration.Contracts.IInterfaceCodeGenerator,Present.CodeGeneration.Contracts.IClassCodeGenerator,Present.CodeGeneration.Contracts.IMethodCodeGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Present.CodeGeneration.Generators.NamespaceCodeGenerator"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="interfaceCodeGenerator">The interface code generator.</param>
            <param name="classCodeGenerator">The class code generator.</param>
            <param name="methodCodeGenerator">The method code generator.</param>
        </member>
        <member name="M:Present.CodeGeneration.Generators.NamespaceCodeGenerator.Generate(System.String,System.String,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
            <summary>
            Generates a Roslyn namespace definition from a type and its methods.
            </summary>
            <param name="typeNamespace">The namespace which the type belongs to.</param>
            <param name="typeName">The name of the type.</param>
            <param name="methods">The methods to be wrapped.</param>
            <returns>The generated namespace declaration.</returns>
        </member>
        <member name="T:Present.CodeGeneration.MethodAnalyser">
            <summary>
            Class responsible for determining whether a method can have a wrapper automatically
            generated.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.MethodAnalyser.#ctor(Ninject.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Present.CodeGeneration.MethodAnalyser"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Present.CodeGeneration.MethodAnalyser.IsWrappingSupported(System.Reflection.MethodInfo)">
            <summary>
            Determines whether a method can be wrapped automatically
            by the Present code generator.
            </summary>
            <param name="method">The method to analyse.</param>
            <returns>Returns true when the method can be wrapped automatially, otherwise false.</returns>
        </member>
        <member name="T:Present.CodeGeneration.TypeWrapper">
            <summary>
            Class responsible from wrapping a type.
            </summary>
        </member>
        <member name="M:Present.CodeGeneration.TypeWrapper.#ctor(Ninject.Extensions.Logging.ILogger,Present.CodeGeneration.Contracts.IMethodAnalyser,Present.CodeGeneration.Contracts.INamespaceCodeGenerator,Present.CodeGeneration.Contracts.ICodeFileWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:Present.CodeGeneration.TypeWrapper"/> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="methodAnalyser">The method analyser.</param>
            <param name="namespaceCodeGenerator">The namespace code generator.</param>
            <param name="codeFileWriter">The code file writer.</param>
        </member>
        <member name="M:Present.CodeGeneration.TypeWrapper.Wrap(System.String,System.String)">
            <summary>
            Creates a wrapper class for a .NET type and outputs
            the code file.
            </summary>
            <param name="assemblyQualifiedTypeName">The assembly qualified name of the .NET type to be wrapped.</param>
            <param name="outputPath">The output path of the generated code file.</param>
        </member>
    </members>
</doc>
